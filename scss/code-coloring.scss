// Code Coloring for Jekyll Theme (tested with Minima)
$white: #ffffff;

// Custom variables for easier use
$comment-color: #c4c5c6;
$code-background: #343434;
$name-tag-color: #e48889;
$name-attribute-color: #eb944d;
$name-builtIn-color: #ddca69;
$error-color: #b92626;
$literal-string-color: #74b99f;
$literal-string-single-color: $literal-string-color;
$literal-string-interpol-color: $literal-string-color;
$literal-number-integer: #eb944d;
$function-builtIn-color: #5fb1e0;
$keyword-declaration-color: #A09ED5;
// Code Container
.highlight {
    background: $code-background;
    padding: 1em;
    color: $white;
    margin: 1em 0 2em 0;
    font-size: 1.2em;
    // Code Coloring:
        .c     { color: $comment-color; font-style: italic }            // Comment
        .err   { color: $error-color; background-color: #e3d2d2 }       // Error
        .nt    { color: $name-tag-color; }                              // Name.Tag
        .na    { color: $name-attribute-color; }                        // Name.Attribute
        .s     { color: $literal-string-color; }                        // Literal.String
        .s1    { color: $literal-string-single-color; }                 // Literal.String.Single
        .si    { color: $literal-string-interpol-color; }               // Literal.String.Interpol
        .mi    { color: $literal-number-integer; }                      // Literal.Number.Integer
        .nb    { color: $name-builtIn-color; }                          // Name.Builtin
        .nx    { color: $function-builtIn-color; }                      // Function.builtIn
        .k     { color: $keyword-declaration-color; }                   // Keyword
        .kd    { color: $keyword-declaration-color; }                   // Keyword.Declaration
}

/*
    I've left the default code coloring theme below commented out.
    If you're using a language I haven't tested, you can use the
    colors below as a reference.  Inspecting the element that is
    behaving stragely will give you the class, then you can add a
    custom variable above. If you are seeing this in the CSS file,
    you can make changes in the scss file and compile here
*/

// .highlight {
//    background: #fff;
//    padding: 1em;
//    .highlighter-rouge & {
//       background: #eef;
//    }
//
//     .c     { color: $comment-color; font-style: italic } // Comment
//     .err   { color: #a61717; background-color: #e3d2d2 } // Error
//     .k     { font-weight: bold } // Keyword
//     .o     { font-weight: bold } // Operator
//     .cm    { color: #998; font-style: italic } // Comment.Multiline
//     .cp    { color: #999; font-weight: bold } // Comment.Preproc
//     .c1    { color: $comment-color; font-style: italic } // Comment.Single
//     .cs    { color: #999; font-weight: bold; font-style: italic } // Comment.Special
//     .gd    { color: #000; background-color: #fdd } // Generic.Deleted
//     .gd .x { color: #000; background-color: #faa } // Generic.Deleted.Specific
//     .ge    { font-style: italic } // Generic.Emph
//     .gr    { color: #a00 } // Generic.Error
//     .gh    { color: #999 } // Generic.Heading
//     .gi    { color: #000; background-color: #dfd } // Generic.Inserted
//     .gi .x { color: #000; background-color: #afa } // Generic.Inserted.Specific
//     .go    { color: #888 } // Generic.Output
//     .gp    { color: #555 } // Generic.Prompt
//     .gs    { font-weight: bold } // Generic.Strong
//     .gu    { color: #aaa } // Generic.Subheading
//     .gt    { color: #a00 } // Generic.Traceback
//     .kc    { font-weight: bold } // Keyword.Constant
//     .kd    { color: $var-color; font-weight: bold } // Keyword.Declaration
//     .kp    { font-weight: bold } // Keyword.Pseudo
//     .kr    { font-weight: bold } // Keyword.Reserved
//     .kt    { color: #458; font-weight: bold } // Keyword.Type
//     .m     { color: #099 } // Literal.Number
//     .s     { color: #d14 } // Literal.String
//     .na    { color: #008080 } // Name.Attribute
//     .nb    { color: #0086B3 } // Name.Builtin
//     .nc    { color: #458; font-weight: bold } // Name.Class
//     .no    { color: #008080 } // Name.Constant
//     .ni    { color: #800080 } // Name.Entity
//     .ne    { color: #900; font-weight: bold } // Name.Exception
//     .nf    { color: #900; font-weight: bold } // Name.Function
//     .nn    { color: #555 } // Name.Namespace
//     .nt    { color: #000080 } // Name.Tag
//     .nv    { color: #008080 } // Name.Variable
//     .ow    { font-weight: bold } // Operator.Word
//     .w     { color: #bbb } // Text.Whitespace
//     .mf    { color: #099 } // Literal.Number.Float
//     .mh    { color: #099 } // Literal.Number.Hex
//     .mi    { color: #099 } // Literal.Number.Integer
//     .mo    { color: #099 } // Literal.Number.Oct
//     .sb    { color: #d14 } // Literal.String.Backtick
//     .sc    { color: #d14 } // Literal.String.Char
//     .sd    { color: #d14 } // Literal.String.Doc
//     .s2    { color: #d14 } // Literal.String.Double
//     .se    { color: #d14 } // Literal.String.Escape
//     .sh    { color: #d14 } // Literal.String.Heredoc
//     .si    { color: #d14 } // Literal.String.Interpol
//     .sx    { color: #d14 } // Literal.String.Other
//     .sr    { color: #009926 } // Literal.String.Regex
//     .s1    { color: #d14 } // Literal.String.Single
//     .ss    { color: #990073 } // Literal.String.Symbol
//     .bp    { color: #999 } // Name.Builtin.Pseudo
//     .vc    { color: #008080 } // Name.Variable.Class
//     .vg    { color: #008080 } // Name.Variable.Global
//     .vi    { color: #008080 } // Name.Variable.Instance
//     .il    { color: #099 } // Literal.Number.Integer.Long
// }
